<!-- editor -->
<div id="container"></div>
<script src="<%= projectRoot %>/node_modules/monaco-editor/min/vs/loader.js"></script>

<div class="scripts">
  <script class="initializer">
    // 初期化

    require.config({
      paths: {
        'vs': '<%= projectRoot %>/node_modules/monaco-editor/min/vs'
      }
    });

    require(['vs/editor/editor.main'], function () {
      window.monaco_editor = monaco.editor.create(document.getElementById('container'), {
        value: [''].join('\n'),
        language: 'markdown',
        wrappingIndent: 'same',
        wordWrap: 'on',
        minimap: {
          enabled: true
        },
      });
      window.monaco_editor.setLocale('ja');
    });
  </script>

  <script class="receiver">
    // 受信部
    // メッセージ受信時の処理
    window.electron.receive('chat-reply', (message) => {
      if (window.monaco_editor !== undefined) {
        window.monaco_editor.setValue(message);
        // エディタのカーソルを先頭に移動
        if (window.monaco_editor.getModels().length > 0) {
          window.monaco_editor.getModels()[0].setPosition({
            lineNumber: 1,
            column: 1
          });
        }
      }
    });

    // 会話履歴を受信したとき
    window.electron.receive('one-history-reply', (message) => {
      // メッセージを表示する
      const answer = message.answer;
      window.monaco_editor.setValue(answer);
    });

  </script>

  <script class="contorller">
    // コンポーネントの制御


    // エディタのリサイズ
    function resizeEditor() {
      document.body.style.width = window.innerWidth + 'px';
      if (window.monaco_editor) {
        window.monaco_editor.layout();
      }
    }

    // エディタの値が変更されたときの処理F
    window.addEventListener('load', function () {
      window.monaco_editor.onDidChangeModelContent(function (event) {
        // ここでエディタの値が変更されたときの処理を行う
        var currentValue = window.monaco_editor.getValue();
        window.electron.send('markdown-to-html', currentValue);
      });
    });

    window.electron.receive('open-mdfile-reply', (message) => {
      window.monaco_editor.setValue(message.content);
    });

    // イベントリスナーの追加
    window.addEventListener('resize', resizeEditor);
    window.addEventListener('mouseup', resizeEditor);
  </script>
</div>