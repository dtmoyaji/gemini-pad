<div component="historyPanel">

    <div class="title history_panel">通信履歴</div>

    <div class="search_panel">
        <input type="text" class="search_field" id="search" placeholder="検索">
        <button class="search_button" id="search_button"></button>
        <button class="remove_history_button" id="remove_history_button"></button>
    </div>

    <ul id="talk_histories">
        <li class="talk_history" list_id="1">
            <div class="bookmark_button"></div>
            <span class="talk_history_item_title">ここに履歴が表示されます</span>
            <div class="delete_button"></div>
        </li>
    </ul>

    <script>
        // メッセージ受信時の処理
        electron.receive('chat-history-reply', (message) => {
            // リストをクリア
            var talk_histories = document.getElementById('talk_histories');
            while (talk_histories.firstChild) {
                talk_histories.removeChild(talk_histories.firstChild);
            }
            // メッセージを追加
            for (var i = 0; i < message.length; i++) {
                var li = document.createElement('li');
                li.setAttribute('class', 'talk_history');
                talk_histories.appendChild(li);

                // liの中にタグを追加
                var innerBookmarkTag = document.createElement('div');
                innerBookmarkTag.setAttribute('class', 'bookmark_button');
                innerBookmarkTag.setAttribute('list_id', message[i].id);
                li.appendChild(innerBookmarkTag);

                var innerSpan = document.createElement('span');
                innerSpan.textContent = message[i].title;
                innerSpan.setAttribute('class', 'talk_history_item_title');
                innerSpan.setAttribute('list_id', message[i].id);
                li.appendChild(innerSpan);

                var innerDeleteTag = document.createElement('div');
                innerDeleteTag.setAttribute('class', 'delete_button');
                innerDeleteTag.setAttribute('list_id', message[i].id);
                li.appendChild(innerDeleteTag);

                // 新たに作成された要素に対してclickイベントリスナーを追加
                innerSpan.addEventListener('click', function () {
                    var messageId = this.getAttribute('list_id');
                    electron.send('talk-history-clicked', messageId);
                });

                // bookmark_buttonクリック時の処理
                innerBookmarkTag.addEventListener('click', function () {
                    var messageId = this.getAttribute('list_id');
                    electron.send('talk-history-bookmark-clicked', messageId);
                });

                // delete_buttonクリック時の処理
                innerDeleteTag.addEventListener('click', function () {
                    var messageId = this.getAttribute('list_id');
                    electron.send('talk-history-delete-clicked', messageId);
                });

            }
        });

        // 検索ボタンクリック時の処理
        document.getElementById('search_button').addEventListener('click', function () {
            var search = document.getElementById('search').value;
            electron.send('search-chat-history', search);
        });

        // search_fieldでEnterキーが押された時の処理
        document.getElementById('search').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                var search = document.getElementById('search').value;
                electron.send('search-chat-history', search);
            }
        });

        // remove_history_buttonクリック時の処理
        document.getElementById('remove_history_button').addEventListener('click', function () {
            electron.send('remove-chat-history');
        });

    </script>
</div>